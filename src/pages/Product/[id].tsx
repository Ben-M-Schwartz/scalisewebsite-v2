/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-misused-promises */
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image"
import { useRouter } from "next/router";
import { api } from "~/utils/api";
import { useForm } from "react-hook-form";
import React, { useState, useEffect } from 'react'

import { setCookie, getCookie, hasCookie/* , deleteCookie */ } from 'cookies-next';
import crypto from 'crypto'

type addToCartForm = {
    size: string;
    quantity: string;
  };

type notifyForm = {
  email: string;
}

const Product: NextPage = () => {
    const router = useRouter();
    const product = api.inventory.get.useQuery({ id: router.query.id as string },  { enabled: !!router.query.id });
    const productData = product.data as {
        name: string,
        price: number,
        weight: number,
        id: number,
        image: string | null,
        product_quantity: {
          size: string,
          quantity_in_stock: number,
          quantity_in_checkouts: number
        }
    }[]
    const [loadSizes, setLoadSizes ] = useState(true)
    const [soldOut, setSoldOut] = useState(false) 
    const [addToCartDisabled, setAddToCartDisabled] = useState(true)
    const [maxQuantity, setMaxQuantity] = useState(0);
    const [pickedSize, setPickedSize] = useState('')

    const addToCart = api.cart.addToCart.useMutation();
    const { register: cartRegister, handleSubmit: cartSubmit } = useForm<addToCartForm>();
    const { register: notifyRegister, handleSubmit: notifySubmit } = useForm<notifyForm>();

    //all possible sizing options used to sort the select html element
    type sizes = 'S' | 'M' | 'L' | 'XL' | 'XXL' | 'XXXL' | 'XXXL'
    interface indexSignature { [key: string]: number}
    const allOptions: indexSignature = {'S': 0, 'M':1, 'L':2, 'XL':3, 'XXL':4, 'XXXL':5, 'XXXXL':6}

    const onSubmitCart = (formData: addToCartForm) => {
      const mutateOptions = {
        size: formData.size,
        quantity: parseInt(formData.quantity),
        price: productData[0]!.price,
        product_id:  productData[0]!.id,
        weight: productData[0]!.weight,
        name: productData[0]!.name,
        cart_id: ''
      }

      if(!hasCookie('cart_id')) {
        const new_cart_id = crypto.randomBytes(16).toString('hex');
        mutateOptions.cart_id = new_cart_id;
        setCookie('cart_id', new_cart_id)
      } else {
        mutateOptions.cart_id = getCookie('cart_id')!.toString();
      }
      addToCart.mutateAsync(mutateOptions).then(() => {
        window.alert('Item added to cart!')
      }).catch(() => window.alert('error'))
    };

    useEffect(() => {
        if (productData && productData[0]) {
          if (productData[0].product_quantity.size === '') {
            setLoadSizes(false);
            setMaxQuantity(productData[0].product_quantity.quantity_in_stock + productData[0].product_quantity.quantity_in_checkouts)
            setAddToCartDisabled(false)
          }
        }
      }, [productData]);

    const handleSizeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
        setPickedSize(event.target.value)
        const selectedOption = event.target.options[event.target.selectedIndex];
        const maxQuantity = selectedOption!.dataset.maxQuantity;
        console.log(maxQuantity)
        setMaxQuantity(parseInt(maxQuantity as string))
        if(parseInt(maxQuantity as string) === 0){
          setSoldOut(true)
          setAddToCartDisabled(true)
        } else if(event.target.value === '') {
          setAddToCartDisabled(true)
        } else {
          setSoldOut(false)
          setAddToCartDisabled(false)
        }
    };

    const notify = api.subscription.notify.useMutation()
    const notifyWhenInStock = (formData: notifyForm) => {
      notify.mutateAsync({ 
        product_id: router.query.id as string, 
        name: productData[0]?.name as string,
        size: pickedSize,
        email: formData.email
      }).catch(error=>console.log(error))
    }

    if(!productData || !productData[0]) return null;


    return (
        <>
            <Head>
                <title>{productData[0].name}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
            <h1 className="mt-12 pl-4 text-4xl text-white">Product Page</h1>
            <div className="flex flex-row gap-20">
              <div className="w-96 h-132 relative flex items-center justify-center">
                  <Image className='object-cover full' src={`/${productData[0].image as string}.png`} alt="image" fill/>
              </div>
              <div className="w-1/2">
            <div className="container mx-auto flex flex-col gap-12">
                <h1 className="mt-12 text-4xl text-white">{productData[0].name}</h1>
                <p className='text-white'>$ {productData[0].price}</p>
            </div>
            <div className="container flex flex-col gap-12 px-4 py-16 ">
                <form
                className="flex flex-col gap-4"
                onSubmit={cartSubmit(onSubmitCart)}>
                    {loadSizes && (
                    <div>
                    <label
                        htmlFor="size"
                        className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                    >
                        Size
                    </label>
                    <select id='size' 
                    {...cartRegister("size", { required: true })}
                    onChange={handleSizeChange} defaultValue=''
                    >
                        <option value='' disabled selected>Select Size</option>
                        {
                        productData
                        .sort((a,b) => {
                          return allOptions[a.product_quantity.size.trim() as sizes]! - allOptions[b.product_quantity.size.trim() as sizes]!
                          })
                        .map((product) => (
                            <option 
                            key={product.product_quantity.size} 
                            value={product.product_quantity.size} 
                            data-max-quantity={product.product_quantity.quantity_in_stock - (product.product_quantity.quantity_in_checkouts || 0)}
                            >
                            {product.product_quantity.size}
                            {product.product_quantity.quantity_in_stock - (product.product_quantity.quantity_in_checkouts  || 0) <= 0 
                            ? '(Out of Stock)' : ''}
                            </option>
                            ))}
                    </select>
                    </div>
                    )}
                    {!soldOut && (
                      <><div>
                  <label
                    htmlFor="quantitiy"
                    className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                  >
                    Quantity
                  </label>
                  <input
                    id="quantities"
                    className="[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none block w-auto rounded-lg border border-gray-300 bg-gray-50 py-2 px-1 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                    {...cartRegister("quantity", { required: true })}
                    type="number"
                    max={maxQuantity} />
                </div><button
                  type="submit"
                  disabled={addToCartDisabled}
                  className={`mb-2 mr-2 rounded-lg inline-block w-1/2 py-5 text-sm font-medium text-white focus:outline-none ${addToCartDisabled
                      ? 'bg-gray-500 cursor-not-allowed'
                      : 'bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'}`}
                >
                    Add To Cart
                  </button></>
                    )}
                </form>
                {soldOut && (
                      <>
                      <h2 className='text-white'>Sold Out</h2>
                      <form onSubmit={notifySubmit(notifyWhenInStock)}>
                        <label htmlFor='notify' 
                        className='text-white'>
                          Notify when back in stock? 
                          </label>
                        <input 
                        id='notify' 
                        type='email' 
                        placeholder='email@example.com'
                        className='block w-auto rounded-lg border border-gray-300 bg-gray-50 py-3 px-4 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500'
                        {...notifyRegister("email", {required: true})}
                        />
                        <button 
                        type='submit' 
                        className='mb-2 mr-2 rounded-lg inline-block w-auto px-10 py-3 text-sm font-medium text-white focus:outline-none bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
                          Notify Me!
                        </button>
                      </form>
                      </>
                  )}
            </div>
            </div>
            </div>
            </main>
        </>
    )
}

export default Product;